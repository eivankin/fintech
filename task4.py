import sqlite3


def justify(value):
    return hex(value)[2:].rjust(64, '0')


bytecode = '60806040523480156200001157600080fd5b506040516200111138038062001111833981018060405281019080805182019291906020018051820192919050505060006040805190810160405280600481526020017f4c43535400000000000000000000000000000000000000000000000000000000815250600090805190602001906200008f92919062000259565b506040805190810160405280600981526020017f4c435320546f6b656e000000000000000000000000000000000000000000000081525060019080519060200190620000dd92919062000259565b5060028060006101000a81548160ff021916908360ff1602179055506000600381905550600090505b8251811015620002505781818151811015156200011f57fe5b906020019060200201516004600085848151811015156200013c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082818151811015156200019357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8484815181101515620001fb57fe5b906020019060200201516040518082815260200191505060405180910390a381818151811015156200022957fe5b90602001906020020151600360008282540192505081905550808060010191505062000106565b50505062000308565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029c57805160ff1916838001178555620002cd565b82800160010185558215620002cd579182015b82811115620002cc578251825591602001919060010190620002af565b5b509050620002dc9190620002e0565b5090565b6200030591905b8082111562000301576000816000905550600101620002e7565b5090565b90565b610df980620003186000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016557806318160ddd146101ca57806323b872dd146101f5578063313ce5671461027a5780633eaaf86b146102ab57806370a08231146102d657806395d89b411461032d578063a293d1e8146103bd578063a9059cbb14610408578063b5931f7c1461046d578063d05c78da146104b8578063dd62ed3e14610503578063e6cb90131461057a575b600080fd5b3480156100e157600080fd5b506100ea6105c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b506101b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610663565b604051808215151515815260200191505060405180910390f35b3480156101d657600080fd5b506101df610755565b6040518082815260200191505060405180910390f35b34801561020157600080fd5b50610260600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a0565b604051808215151515815260200191505060405180910390f35b34801561028657600080fd5b5061028f610a30565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102b757600080fd5b506102c0610a43565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b50610317600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a49565b6040518082815260200191505060405180910390f35b34801561033957600080fd5b50610342610a92565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610382578082015181840152602081019050610367565b50505050905090810190601f1680156103af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c957600080fd5b506103f26004803603810190808035906020019092919080359060200190929190505050610b30565b6040518082815260200191505060405180910390f35b34801561041457600080fd5b50610453600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b4c565b604051808215151515815260200191505060405180910390f35b34801561047957600080fd5b506104a26004803603810190808035906020019092919080359060200190929190505050610cd5565b6040518082815260200191505060405180910390f35b3480156104c457600080fd5b506104ed6004803603810190808035906020019092919080359060200190929190505050610cf9565b6040518082815260200191505060405180910390f35b34801561050f57600080fd5b50610564600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d2a565b6040518082815260200191505060405180910390f35b34801561058657600080fd5b506105af6004803603810190808035906020019092919080359060200190929190505050610db1565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561065b5780601f106106305761010080835404028352916020019161065b565b820191906000526020600020905b81548152906001019060200180831161063e57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460035403905090565b60006107eb600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610b30565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108b4600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610b30565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061097d600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610db1565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b60035481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b505050505081565b6000828211151515610b4157600080fd5b818303905092915050565b6000610b97600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610b30565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c23600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610db1565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008082111515610ce557600080fd5b8183811515610cf057fe5b04905092915050565b600081830290506000831480610d195750818382811515610d1657fe5b04145b1515610d2457600080fd5b92915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008183019050828110151515610dc757600080fd5b929150505600a165627a7a7230582036f635891bd1835e1f75e2b3e9f4f392deebda4a998f7c96482a8a530e2e30360029'
cursor = sqlite3.connect(input()).cursor()
users = cursor.execute('select * from users').fetchall()
addresses, balances = '', ''
n = len(users)
for index, account in users:
    transfers_to = cursor.execute('select _amount from transfers where _to=?', (index,)).fetchall()
    accruals = cursor.execute('select _amount from accruals where _to=?', (index,)).fetchall()
    transfers_from = cursor.execute('select _amount from transfers where _from=?', (index,)).fetchall()
    b = sum(sum(transfers_to, tuple())) + sum(sum(accruals, tuple())) - sum(sum(transfers_from, tuple()))
    addresses += account.hex().rjust(64, '0')
    balances += justify(b)
print(bytecode + justify(64) + justify(32 * (3 + n)) + justify(n) + addresses + justify(n) + balances)

